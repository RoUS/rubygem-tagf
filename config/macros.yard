#--
# Copyright © 2022 Ken Coar
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.
#++
# frozen_string_literal: true

# @private
#   This file contains macros and reusable strings for insertion
#   into other source files.

# @!macro [new] doc.TAGF.module
#   Top-level module namespacing all of the pieces of the `tagf` gem.

# @!macro [new] doc.TAGF.module.eigenclass
#   Eigenclass for a TAGF module.  It provides class methods (like
#   additional attribute declaration methods) for anything that
#   extends the TAGF module into its singleton class.

# @!macro [new] doc.TAGF.Mixin.ClassMethods.module
#   Define class methods and constants that will be added to all
#   modules and classes in the TAF namespace.  These definitions live
#   in the modules' and class' eigenclasses (<em>a.k.a.</em>
#   'singleton classes').  Things like the `extended` and `included`
#   metamethods live in the eigenclass, and class-level methods like
#   `attr_accessor` are defined in the eigenclass as well.
#

# @!macro [new] doc.TAGF.Mixin.DTypes.module
#   Define attribute-accessor class methods that perform things like
#   datatype validation on set.  These definitions live
#   in the modules' and class' eigenclasses (<em>a.k.a.</em>
#   'singleton classes').
#

# @!macro [new] doc.TAGF.Exceptions.module
#   Defines exception classes specific to the {TAGF} module.  All are
#   namespaced under `TAGF::Exceptions`.
#
#   Some exceptions are used internally for signalling conditions,
#   such as attempts to put more into a container than it can hold.

# @!macro [new] doc.TAGF.Exceptions.InventoryLimitExceeded.module
#   Define excpetions that are used to signal problems with trying
#   to put more into an object's inventory than it can hold.  These
#   are `rescue`d in the normal flow of things.

# @!macro [new] doc.TAGF.Mixin.module
#   Module namespacing all the modules specifically designed to be
#   mixed into classes and other modules.

# @!macro [new] doc.TAGF.Mixin.module.eigenclass
#   Eigenclass for the $0 module; essentially just defines
#   the `included` method for the mixin.
#

# @!macro [new] doc.TAGF.Mixin.Actor.module
#   Mixin module for active objects, like the PC and NPCs.  They get
#   moved around by the player and/or game logic with specific
#   semantics.

# @!macro [new] doc.TAGF.Mixin.Container.module
#   Mixin module defining methods specific to objects that have
#   inventories, such as locations, player and NPC objects, and some
#   items.

# @!macro [new] doc.TAGF.Mixin.Debugging.module
#   Mixin module defining methods specific to objects that have
#   inventories, such as locations, player and NPC objects, and some
#   items.

# @!macro [new] doc.TAGF.Mixin.Element.module
#   Define class methods and constants that will be added to all
#   object classes and eigenclasses in the TAF namespace.  Having this
#   in the eigenclass ancestry authenticates an object as being a
#   valid game element.

# @!macro [new] doc.TAGF.Mixin.Events.module
# Defines exception classes specific to the {TAGF} module.  All
# are namespaced under `TAGF::Exceptions`.
#
# Some exceptions are used internally for signalling conditions,
# such as attempts to put more into a container than it can hold.

# @!macro [new] doc.TAGF.Mixin.Location.module
#   Mixin module defining methods specific to objects that are
#   locations in a game (rooms, <em>etc.</em>).

# @!macro [new] doc.TAGF.Mixin.UniversalMethods.module
#   Defines basic methods and extends class methods for all portions
#   of the {TAGF} module.

# @!macro [new] doc.TAGF.PackageMethods.module
#   'Class' methods specifically for the `TAGF` module, which serve as
#   a central static point for things shared across the package.

# @!macro [new] doc.TAGF.Refinement.module
#   Module containing refinements for redefinitions to be referenced
#   with `using`.

# @!macro [new] doc.TAGF.Refinement.Description.module
#   Refine the `String` class to add methods for variable width and
#   formatted display.

# @!macro [new] TAGF.constant.Loadable_Fields
#   Fields specific to this class or module that are loadable from
#   YAML.  Facets which are calculated at runtime or otherwise derived
#   do not appear in this constant.

# @!macro [new] doc.TAGF.UI.module
#   User interface module, for command processing &c.

# @!macro [new] doc.TAGF.UI.InputMethod.module
#   Module defining a namespace and common methods for the various
#   ways input is specifically obtained from the user.  File input is
#   treated differently from console/terminal input.
#
#   Unfortunately, the Ruby readline library isn't a universal input
#   method, hence this extra shite.

# @!macro [new] doc.TAGF.formal.kwargs
#   @param [Hash] kwargs
#     hash with symbolic keys providing additional information to
#     the method.

# @!macro [new] doc.TAGF.module.classmethod.extended
#   Method invoked whenever this module is included as a mixin.  It is
#   passed the class (or module) object that is including it.  We
#   extend the caller's eigenclass with the
#   {TAGF::Mixin::ClassMethods} module, which adds various class
#   methods (like {TAGF::Mixin::DType#flag}).
#
#   @param [Class,Module] klass
#     Object whose eigenclass is being extended by this module.
#   @return [void]

# @!macro [new] doc.TAGF.module.classmethod.included
#   Method invoked whenever this module is included as a mixin.  It is
#   passed the class (or module) object that is including it.  We
#   extend the caller's eigenclass with the
#   {TAGF::Mixin::ClassMethods} module, which adds various class
#   methods (like {TAGF::Mixin::DTypes#flag}).
#   @todo
#     <b>Fix this description; it is no longer accurate.</b>
#
#   @param [Class,Module] klass
#     Object that is including this module as a mixin.
#   @return [void]

# @!macro [new] doc.TAGF.classmethod.file_accessor.declare
#   @!method [rw] $0(*args, **kwargs)
#   Declares the specified symbols as accessors for file I/O streams.
#   By default, two (2) methods are defined, for each symbol:
#
#    * <em>`symbol`</em> --
#      returns the current attribute value.
#    * <em>`symbol=`(value)</em> --
#      sets the attribute to the 'truthy' interpretation of the
#      argument <em>value</em>.
#
#   @note
#     Similar to `attr_accessor`, there are alias names for
#     `file_accessor`:
#     * `file_reader` — Only the <b>`getter`</b> method is defined.
#     * `file_writer` — Only the <b>`setter`</b> method is defined.
#
#   @todo
#     Document correctly; consider
#```
# @param [Array]			args		([])
# @param [Hash<Symbol=>Object>]	kwargs		({})
# @option kwargs [Boolean]	:opened		(true)
# @return [void]
#```
#
#   @param [Array<Symbol>] args
#     Identifiers for the flag attributes to be declared.
#   @param [Hash<Symbol=>Object>] kwargs
#     Hash of keyword arguments; see below.
#     <strong>This is actually WRONG!</strong>
#   @todo
#     Make the use of the kwargs parameter more clear in the code
#     and fix the docco here.
#   @option kwargs [Symbol] :default
#     Meh.
#   @return [void]
#

# @!macro [new] doc.TAGF.classmethod.file_accessor.invoke
#   @!attribute [rw] $1 (nil)
#     0="$0" 1="$1" 2="$2" 3="$3" 4="$4" &="$&"
#   @overload $1 (nil)
#     0="$0" 1="$1" 2="$2" 3="$3" 4="$4" &="$&"
#     Access the current value of the `$1` attribute, which is
#     always either `nil` or an IO object.  It will have no
#     other types of values.  If it has never been read before,
#     the first access will pre-set it to the initial value (if
#     any) specified when the attribute was declared with `$0`.
#     If the declaration didn't specify an initial value, `false`
#     is used by default.
#     Return the current value of the `$1` attribute, which is
#     always either `true` or `false`.  It will have no other
#     values.
#
#     @return [IO,nil]
#       the current valu of the attribute, either `nil` or an IO
#       object.
#
#   @overload $1=(value)
#     Sets the `$1` attribute to either `nil` or an IO object
#     instance.
#     @param [Object] value
#     @raise [TypeError]
#       if the value is anything other than `nil` or an IO object.
#     @return [Object]
#       the value of `value` that was passed.

# @!macro [new] doc.TAGF.classmethod.flag.declare
#   @!method [rw] $0(*args, **kwargs)
#   0="$0" 1="$1" 2="$2" 3="$3" 4="$4" &="$&"
#   Declares the specified symbols as accessors for Boolean
#   values.  For each symbol, four (4) methods are defined:
#
#    * <em>`symbol`</em> --
#      returns the current attribute value.
#    * <em>`symbol=`(value)</em> --
#      sets the attribute to the 'truthy' interpretation of the
#      argument <em>value</em>.
#    * <em>`symbol?`</em> --
#      returns `true` or `false` according to the attribute's
#      current value.  <em>Equivalent to the </em>`symbol`<em>
#      method above.</em>
#    * <em>`symbol!`</em> --
#      unconditionally sets the attribute to `true`.
#
#   @param [Array<Symbol>] args
#     Identifiers for the flag attributes to be declared.
#   @param [Hash{Symbol=>Object}] kwargs
#     Hash of keyword arguments; see below.
#     <strong>This is actually WRONG!</strong>
#   @todo
#     Make the use of the kwargs parameter more clear in the code
#     and fix the docco here.
#   @option kwargs [Symbol] :default
#     Meh.
#   @return [void]
#

# Documentation for the shared attributes defined in
# {TAGF::UI::KWSYMS}.
# @!macro [new] doc.TAGF.UI.input_formals
#   @param [Array]                      args            ([])
#   @param [Hash<Symbol=>Object>]       kwargs          ({})
#   @option kwargs [Boolean]            :echo           (true)
#   @option kwargs [Boolean]            :transcribe     (false)
#   @option kwargs [Boolean]            :record         (true)
#   @option kwargs [Boolean]            :raise_on_eof   (true)
#   @option kwargs [Boolean]            :strip_leading  (true)
#   @option kwargs [Boolean]            :strip_trailing (true)
#   @option kwargs [Boolean]            :allow_heredoc  (true)
#   @option kwargs [Boolean]            :in_heredoc     (false)
#   @option kwargs [HereDoc]            :heredoc        (nil)
#   @option kwargs [String]             :prompt         ("> ")
#   @option kwargs [Proc]               :completion_proc (nil)
#   @option kwargs [Boolean]            :propagate_history (true)
#   @option kwargs [Array<String>]      :lines          ([])
#     Name (or instance) of the input method class that should be
#     instantiated to handle actually reading from the input source.
#   @option kwargs [InputMethod,String] :inputmethod    (nil)
#   @option kwargs [String]             :file
#   @option kwargs [String]             :pathname       (nil)
#     String to use when rendering the stream's path for human
#     consumption.
#   @option kwargs [Context]            :context
#     (<b>Ignored for Context and Interface objects</b>
#     <b>REQUIRED.</b>
#     Interface context to use.  Contains relevant details such as
#     the current prompt, whether to echo input, <em>&c.</em>
#   @option kwargs [String,IO]          :input          ($stdin)
#   @option kwargs [String,IO]          :output         ($stdout)
#   @option kwargs [String,IO]          :error          ($stderr)

# @!macro [new] doc.TAGF.classmethod.flag.invoke
#   @!attribute [rw] $1
#   false 0="$0" 1="$1" 2="$2" 3="$3" 4="$4" &="$&"
#   @overload $1 (false 0="$0" 1="$1" 2="$2" 3="$3" 4="$4" &="$&")
#     false 0="$0" 1="$1" 2="$2" 3="$3" 4="$4" &="$&"
#     Access the current value of the `$1` attribute, which is
#     always a Boolean, either `true` or `false`.  It will have no
#     other types of values.  If it has never been read before,
#     the first access will pre-set it to the initial value (if
#     any) specified when the attribute was declared with `$0`.
#     If the declaration didn't specify an initial value, `false`
#     is used by default.
#     Return the current value of the `$1` attribute, which is
#     always either `true` or `false`.  It will have no other
#     values.
#     @return [Boolean]
#       `true` if the `$1` flag is set, or `false` otherwise.
#   @overload $1=(value)
#     Sets the `$1` attribute to the 'truthy' interpretation of
#     `value`.  <em>I.e.</em>, if Ruby would regard `arg` as
#     `true`, then that's how `$1` will be set.
#     <strong>Exception:</strong> Any numeric value that coerces
#     to `Integer(0)` will be regarded as
#     <strong>`false`</strong>.
#     @param [Object] value
#     @return [Object]
#       the value of `value` that was passed.
#   @overload $1?
#     @return [Boolean]
#       `true` if the `$1` attribute is set, or `false` otherwise.
#   @overload $1!
#     Unconditionally sets `$1` to `true`.
#     @return [Boolean] `true`.

# @!macro [new] doc.TAGF.classmethod.float_accessor.declare
#   TBS
#   @note
#     Similar to `attr_accessor`, there are alias names for
#     `float_accessor`:
#     * `float_reader` — Only the <b>`getter`</b> method is defined.
#     * `float_writer` — Only the <b>`setter`</b> method is defined.
#

# @!macro [new] doc.TAGF.classmethod.float_accessor.invoke
#   @!attribute [rw] $1
#   @overload $1
#     Access the current value of the `$1` attribute, which is
#     always a floating-point (`Float`) number.  It will have no
#     other types of values.  If it has never been read before,
#     the first access will pre-set it to the initial value (if
#     any) specified when the attribute was declared with `$0`.
#     If the declaration didn't specify an initial value, `0.0`
#     is used by default.
#
#     @return [Float]
#       `true` if the `$1` flag is set, or `false` otherwise.
#
#   @overload $1=(value)
#     Sets the `$1` attribute to the 'truthy' interpretation of
#     `value`.  <em>I.e.</em>, if Ruby would regard `arg` as
#     `true`, then that's how `$1` will be set.
#     <strong>Exception:</strong> Any numeric value that coerces
#     to `Integer(0)` will be regarded as
#     <strong>`false`</strong>.
#     @param [Object] value
#     @raise [TypeError]
#       `attribute '$1' can only have float values or something
#       coercible`
#     @return [Object]
#       the value to which the attribute was set.

# @!macro [new] doc.TAGF.classmethod.int_accessor.declare
#   @note
#     Similar to `attr_accessor`, there are alias names for
#     `int_accessor`:
#     * `int_reader` — Only the <b>`getter`</b> method is defined.
#     * `int_writer` — Only the <b>`setter`</b> method is defined.
#
#   TBS

# @!macro [new] doc.TAGF.classmethod.int_accessor.invoke
#   @!attribute [rw] $1
#   @overload $1
#     @return [Integer]
#       the current value of `$1`.
#   @overload $1=(value)
#     @param [Integer] value
#     @raise [TypeError]
#       `attribute '$1' can only have integer values or something
#       coercible`
#     @return [Integer]
#       the value of `value` that was passed in.
#

# Local Variables:
# mode: ruby
# indent-tabs-mode: nil
# eval: (if (intern-soft "fci-mode") (fci-mode 1))
# eval: (auto-fill-mode 1)
# End:

#--
# Copyright Â© 2022 Ken Coar
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.
#++
# frozen_string_literal: true

# @private
#   This file contains macros and reusable strings for insertion
#   into other source files.

# @!macro [new] doc.TAF
#   Top-level module namespacing all of the pieces of the `sptaf` gem.

# @!macro [new] doc.TAF.eigenclass
#   Top-level module namespacing all of the pieces of the `sptaf` gem.

# @!macro [new] doc.Thing
#   Mixin module defining common methods for all objects in a game.

# @!macro [new] doc.ContainerMixin
#   Mixin module defining methods specific to objects that have
#   inventories.

# @!macro [new] doc.ContainerMixin.eigenclass
#   Mixin module defining methods specific to objects that are
#   locations in a game (rooms, <em>etc.</em>.

# @!macro [new] doc.Exceptions
#   Mixin module defining methods specific to objects that are
#   locations in a game (rooms, <em>etc.</em>.

# @!macro [new] doc.LocationMixin
#   Mixin module defining methods specific to objects that are
#   locations in a game (rooms, <em>etc.</em>.

# @!macro [new] doc.LocationMixin.eigenclass
#   Mixin module defining methods specific to objects that are
#   locations in a game (rooms, <em>etc.</em>.

# @!macro [new] doc.ClassMethods
#   Define class methods and constants that will be added to all
#   modules and classes in the TAF namespace.

# @!macro [new] doc.ClassMethods.eigenclass
#   Define methods and constants that live in the modules' and class'
#   eigenclasses (<em>a.k.a.</em>, `singleton classes'.  Things like
#   the #extended and #included metamethods live in the eigenclass.

# @!macro [new] doc.ClassMethods.Thing
#   Define class methods and constants that will be added to all
#   object classes in the TAF namespace.

# @!macro [new] doc.ClassMethods.Thing.eigenclass
#   Define methods and constants that live in the modules' and class'
#   eigenclasses (<em>a.k.a.</em>, `singleton classes'.  Things like
#   the #extended and #included metamethods live in the eigenclass.

# Local Variables:
# mode: ruby
# indent-tabs-mode: nil
# eval: (if (intern-soft "fci-mode") (fci-mode 1))
# End:

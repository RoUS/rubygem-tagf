#--
# Copyright Â© 2022 Ken Coar
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.
#++
# frozen_string_literal: true

# @private
#   This file contains macros and reusable strings for insertion
#   into other source files.

# @!macro [new] doc.TAF.module
#   Top-level module namespacing all of the pieces of the `sptaf` gem.

# @!macro [new] doc.TAF.module.classmethod.included
#   Method invoked whenever this module is included as a mixin.  It
#   is passed the class (or module) object that is including it.  We
#   extend the caller's eigenclass with the {ClassMethods} module,
#   which adds various class methods (like {TAF::ClassMethods#flag}).
#  
#   @param [Class,Module] klass
#     Object that is including this module as a mixin.
#   @return [void]

# @!macro [new] doc.TAF.module.eigenclass
#
# Eigenclass for the $0 module; essentially just defines
# the `included` method for the mixin.
#

# @!macro [new] doc.TAF::Thing.module
#   Mixin module defining common methods for all objects in a game.

# @!macro [new] doc.TAF::Container.classmethod.inventory_accessor.exception.TypeError
#   @raise [TypeError]
#     `attribute '$0' can only have instances of class TAF::Inventory`

# Local Variables:
# mode: ruby
# indent-tabs-mode: nil
# eval: (if (intern-soft "fci-mode") (fci-mode 1))
# End:
